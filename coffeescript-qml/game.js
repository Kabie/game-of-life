// Generated by CoffeeScript 1.9.0
var Game;

Game = (function() {
  function Game(_at_cells, _at_columns, _at_rows) {
    this.cells = _at_cells;
    this.columns = _at_columns;
    this.rows = _at_rows;
    this.current = this.eachCell(this.cells, (function(_this) {
      return function(x, y) {
        var i;
        i = y * _this.columns + x;
        return _this.cells.itemAt(i);
      };
    })(this));
    this.setNeighbors();
  }

  Game.prototype.eachCell = function(cells, f) {
    var x, y, _i, _ref, _results;
    _results = [];
    for (y = _i = 0, _ref = this.rows; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
      _results.push((function() {
        var _j, _ref1, _results1;
        _results1 = [];
        for (x = _j = 0, _ref1 = this.columns; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
          _results1.push(f(x, y));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  Game.prototype.iterate = function() {
    var tmp;
    tmp = this.eachCell(this.current, (function(_this) {
      return function(x, y) {
        var aliveNeighbors, cell, i, n;
        cell = _this.current[y][x];
        aliveNeighbors = cell.neighbors.filter(function(nb) {
          return nb.isAlive;
        });
        cell.numberOfAliveNeighbors = aliveNeighbors.length;
        n = aliveNeighbors.length;
        if (n < 2 || n > 3) {
          return false;
        } else if (n === 3) {
          if (!cell.isAlive) {
            i = [[0, 1, 2], [0, 2, 1], [1, 0, 2], [1, 2, 0], [2, 0, 1], [2, 1, 0]][Math.floor(Math.random() * 6)];
            cell.r = aliveNeighbors[i[0]].r;
            cell.g = aliveNeighbors[i[1]].g;
            cell.b = aliveNeighbors[i[2]].b;
          }
          return true;
        } else {
          return cell.isAlive;
        }
      };
    })(this));
    return this.eachCell(this.current, (function(_this) {
      return function(x, y) {
        return _this.current[y][x].isAlive = tmp[y][x];
      };
    })(this));
  };

  Game.prototype.setNeighbors = function() {
    return this.eachCell(this.current, (function(_this) {
      return function(x, y) {
        var down, left, right, up;
        left = (x + _this.columns - 1) % _this.columns;
        right = (x + 1) % _this.columns;
        up = (y + _this.rows - 1) % _this.rows;
        down = (y + 1) % _this.rows;
        return _this.current[y][x].neighbors = [_this.current[up][left], _this.current[up][x], _this.current[up][right], _this.current[y][left], _this.current[y][right], _this.current[down][left], _this.current[down][x], _this.current[down][right]];
      };
    })(this));
  };

  return Game;

})();
